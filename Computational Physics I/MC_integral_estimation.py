import numpy as np
import matplotlib.pyplot as plt
def f(x):
    res=np.exp(x)
    return(res)
def monte_carlo_sampling(f,nmc,ns,b,a):#nmc is the number of the random numbers generated by the monte carlo technique
    #ns the nmber of samples we want,f is the function we want to integrate, b is the upper limit and a is the lower limit
    res=[]#this the list of the result of estimations
    for i in range(ns):#this loop is turning the number of the estimates we want
        randomnumbers=[]#this is the random numbers generated in that list in every estimate
        for j in range(nmc):#this loop is generating unifrom random numbers
            randomnumbers.append(np.random.uniform(a,b))#random number generator
        sample=[]#this is the list that contains the result of function that given input as random numbers
        for k in randomnumbers:
            s=f(k)
            sample.append(s)
        I=(b-a)*(1/len(randomnumbers))*sum(sample)#this is the integral given in formula
        res.append(I)
    r2=np.array(res)#making the result list to an array
    sig_2=0#this is the square of the sigma
    for p in r2:#this loop for calculating the sigma
        sig_2+=(p**2)*(1/ns)*(1/(ns-1))
    sig_2-=((sum(res)*(1/ns))**2)*(1/(ns-1))#again last edition to the sigma gives the lst form of the sigma
    mean1=sum(res)/ns#this is the mean of the resulting list
    plt.xlabel("MC estimation of Integral")
    plt.ylabel("arbitrary axis")
    plt.title("Estimation of integral")
    plt.grid(True)
    plt.hist(r2,bins=15)#plotting the estimations
    plt.gcf().savefig("Monte_Carlo_Estimation.pdf")
    return((mean1-np.sqrt(sig_2)),(mean1+np.sqrt(sig_2)),mean1)#this gives the mean plus and minus sigma and mean of the estimations
